/**
 * generated by Xtext 2.17.0
 */
package de.upb.crypto.zeroknowledge.formatting2;

import com.google.inject.Inject;
import de.upb.crypto.zeroknowledge.services.ZeroKnowledgeGrammarAccess;
import de.upb.crypto.zeroknowledge.zeroKnowledge.Expression;
import de.upb.crypto.zeroknowledge.zeroKnowledge.FunctionDefinition;
import de.upb.crypto.zeroknowledge.zeroKnowledge.Model;
import de.upb.crypto.zeroknowledge.zeroKnowledge.ParameterList;
import de.upb.crypto.zeroknowledge.zeroKnowledge.WitnessList;
import de.upb.crypto.zeroknowledge.zeroKnowledge.ZeroKnowledgePackage;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class ZeroKnowledgeFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ZeroKnowledgeGrammarAccess _zeroKnowledgeGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<FunctionDefinition> _functions = model.getFunctions();
    for (final FunctionDefinition functionDefinition : _functions) {
      document.<FunctionDefinition>format(functionDefinition);
    }
    document.<WitnessList>format(model.getWitnessList());
    document.<Expression>format(model.getProof());
  }
  
  protected void _format(final FunctionDefinition functionDefinition, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(functionDefinition).feature(ZeroKnowledgePackage.Literals.FUNCTION_DEFINITION__NAME), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(functionDefinition).keyword("{"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(functionDefinition).keyword("}"), _function_2);
    document.<ParameterList>format(functionDefinition.getParameterList());
    document.<Expression>format(functionDefinition.getBody());
  }
  
  protected void _format(final WitnessList witnessList, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(witnessList).keyword("("), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(witnessList).keyword(")"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(witnessList).keyword(","), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(this.textRegionExtensions.regionFor(witnessList).keyword(","), _function_3);
  }
  
  public void format(final Object functionDefinition, final IFormattableDocument document) {
    if (functionDefinition instanceof XtextResource) {
      _format((XtextResource)functionDefinition, document);
      return;
    } else if (functionDefinition instanceof FunctionDefinition) {
      _format((FunctionDefinition)functionDefinition, document);
      return;
    } else if (functionDefinition instanceof Model) {
      _format((Model)functionDefinition, document);
      return;
    } else if (functionDefinition instanceof WitnessList) {
      _format((WitnessList)functionDefinition, document);
      return;
    } else if (functionDefinition instanceof EObject) {
      _format((EObject)functionDefinition, document);
      return;
    } else if (functionDefinition == null) {
      _format((Void)null, document);
      return;
    } else if (functionDefinition != null) {
      _format(functionDefinition, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(functionDefinition, document).toString());
    }
  }
}
