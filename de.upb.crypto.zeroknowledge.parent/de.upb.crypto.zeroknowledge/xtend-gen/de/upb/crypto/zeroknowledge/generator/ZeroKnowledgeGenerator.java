/**
 * generated by Xtext 2.17.0
 */
package de.upb.crypto.zeroknowledge.generator;

import com.google.common.base.Objects;
import de.upb.crypto.zeroknowledge.generator.CodeGeneration;
import de.upb.crypto.zeroknowledge.latex.LatexPreview;
import de.upb.crypto.zeroknowledge.zeroKnowledge.Model;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 * 
 * Precondition: model must be free of validation errors before Java code generation can occur
 */
@SuppressWarnings("all")
public class ZeroKnowledgeGenerator extends AbstractGenerator {
  private static final String LOCAL_OUTPUT_FILE = "proof.java";
  
  private static final String WEB_OUTPUT_FILE = "/DEFAULT_ARTIFACT";
  
  private static final boolean COMPILE_LOCALLY = false;
  
  private static final String CODE_RESOURCE = "code.zkak";
  
  private static final String LATEX_RESOURCE = "latex.zkak";
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    URI _uRI = resource.getURI();
    String _plus = ("GENERATOR CALLED" + _uRI);
    System.out.println(_plus);
    final String resourceId = resource.getURI().toString();
    EObject _next = resource.getContents().iterator().next();
    final Model model = ((Model) _next);
    boolean _isCanceled = context.getCancelIndicator().isCanceled();
    if (_isCanceled) {
      return;
    }
    String code = null;
    System.out.println(resourceId);
    boolean _equals = Objects.equal(resourceId, ZeroKnowledgeGenerator.LATEX_RESOURCE);
    if (_equals) {
      System.out.println("LATEX");
      final LatexPreview latexPreview = new LatexPreview(model);
      code = latexPreview.getRawLatex();
    } else {
      boolean _equals_1 = Objects.equal(resourceId, ZeroKnowledgeGenerator.CODE_RESOURCE);
      if (_equals_1) {
        final CodeGeneration codeGeneration = new CodeGeneration(model);
        code = codeGeneration.getCode();
      } else {
        final CodeGeneration codeGeneration_1 = new CodeGeneration(model);
        code = codeGeneration_1.getCode();
      }
    }
    if (ZeroKnowledgeGenerator.COMPILE_LOCALLY) {
      fsa.generateFile(ZeroKnowledgeGenerator.LOCAL_OUTPUT_FILE, code);
    } else {
      fsa.generateFile(ZeroKnowledgeGenerator.WEB_OUTPUT_FILE, code);
    }
  }
}
