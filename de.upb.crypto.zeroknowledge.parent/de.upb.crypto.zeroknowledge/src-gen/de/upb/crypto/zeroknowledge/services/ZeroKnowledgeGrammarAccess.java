/*
 * generated by Xtext 2.17.0
 */
package de.upb.crypto.zeroknowledge.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ZeroKnowledgeGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionsFunctionDefinitionParserRuleCall_0_0 = (RuleCall)cFunctionsAssignment_0.eContents().get(0);
		private final Assignment cWitnessListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWitnessListWitnessListParserRuleCall_1_0 = (RuleCall)cWitnessListAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProofAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProofExpressionParserRuleCall_3_0 = (RuleCall)cProofAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Model:
		//	functions+=FunctionDefinition* witnessList=WitnessList ';'? proof=Expression ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=FunctionDefinition* witnessList=WitnessList ';'? proof=Expression ';'?
		public Group getGroup() { return cGroup; }
		
		//functions+=FunctionDefinition*
		public Assignment getFunctionsAssignment_0() { return cFunctionsAssignment_0; }
		
		//FunctionDefinition
		public RuleCall getFunctionsFunctionDefinitionParserRuleCall_0_0() { return cFunctionsFunctionDefinitionParserRuleCall_0_0; }
		
		//witnessList=WitnessList
		public Assignment getWitnessListAssignment_1() { return cWitnessListAssignment_1; }
		
		//WitnessList
		public RuleCall getWitnessListWitnessListParserRuleCall_1_0() { return cWitnessListWitnessListParserRuleCall_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//proof=Expression
		public Assignment getProofAssignment_3() { return cProofAssignment_3; }
		
		//Expression
		public RuleCall getProofExpressionParserRuleCall_3_0() { return cProofExpressionParserRuleCall_3_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cParameterListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterListParameterListParserRuleCall_1_0 = (RuleCall)cParameterListAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyExpressionParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FunctionDefinition:
		//	name=IDENTIFIER parameterList=ParameterList '{' body=Expression '}' ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IDENTIFIER parameterList=ParameterList '{' body=Expression '}' ';'?
		public Group getGroup() { return cGroup; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0_0() { return cNameIDENTIFIERTerminalRuleCall_0_0; }
		
		//parameterList=ParameterList
		public Assignment getParameterListAssignment_1() { return cParameterListAssignment_1; }
		
		//ParameterList
		public RuleCall getParameterListParameterListParserRuleCall_1_0() { return cParameterListParameterListParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//body=Expression
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//Expression
		public RuleCall getBodyExpressionParserRuleCall_3_0() { return cBodyExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_1_0_0 = (RuleCall)cParametersAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParameterList:
		//	'(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_0() { return cParametersAssignment_1_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_0_0() { return cParametersParameterParserRuleCall_1_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1_1() { return cParametersAssignment_1_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_1_0() { return cParametersParameterParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Parameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Parameter:
		//	name=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0() { return cNameIDENTIFIERTerminalRuleCall_0; }
	}
	public class WitnessListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.WitnessList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWitnessesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWitnessesWitnessParserRuleCall_1_0 = (RuleCall)cWitnessesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWitnessesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWitnessesWitnessParserRuleCall_2_1_0 = (RuleCall)cWitnessesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WitnessList:
		//	'(' witnesses+=Witness? (',' witnesses+=Witness)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' witnesses+=Witness? (',' witnesses+=Witness)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//witnesses+=Witness?
		public Assignment getWitnessesAssignment_1() { return cWitnessesAssignment_1; }
		
		//Witness
		public RuleCall getWitnessesWitnessParserRuleCall_1_0() { return cWitnessesWitnessParserRuleCall_1_0; }
		
		//(',' witnesses+=Witness)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//witnesses+=Witness
		public Assignment getWitnessesAssignment_2_1() { return cWitnessesAssignment_2_1; }
		
		//Witness
		public RuleCall getWitnessesWitnessParserRuleCall_2_1_0() { return cWitnessesWitnessParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class WitnessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Witness");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTestingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTestingQuestionMarkKeyword_1_0 = (Keyword)cTestingAssignment_1.eContents().get(0);
		
		//Witness:
		//	name=IDENTIFIER testing?="?"?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IDENTIFIER testing?="?"?
		public Group getGroup() { return cGroup; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0_0() { return cNameIDENTIFIERTerminalRuleCall_0_0; }
		
		//testing?="?"?
		public Assignment getTestingAssignment_1() { return cTestingAssignment_1; }
		
		//"?"
		public Keyword getTestingQuestionMarkKeyword_1_0() { return cTestingQuestionMarkKeyword_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Expression");
		private final RuleCall cConjunctionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Conjunction;
		@Override public ParserRule getRule() { return rule; }
		
		//Conjunction
		public RuleCall getConjunctionParserRuleCall() { return cConjunctionParserRuleCall; }
	}
	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Conjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDisjunctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConjunctionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperationAmpersandKeyword_1_1_0 = (Keyword)cOperationAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDisjunctionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Conjunction Expression:
		//	Disjunction ({Conjunction.left=current} operation='&' right=Disjunction)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Disjunction ({Conjunction.left=current} operation='&' right=Disjunction)*
		public Group getGroup() { return cGroup; }
		
		//Disjunction
		public RuleCall getDisjunctionParserRuleCall_0() { return cDisjunctionParserRuleCall_0; }
		
		//({Conjunction.left=current} operation='&' right=Disjunction)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Conjunction.left=current}
		public Action getConjunctionLeftAction_1_0() { return cConjunctionLeftAction_1_0; }
		
		//operation='&'
		public Assignment getOperationAssignment_1_1() { return cOperationAssignment_1_1; }
		
		//'&'
		public Keyword getOperationAmpersandKeyword_1_1_0() { return cOperationAmpersandKeyword_1_1_0; }
		
		//right=Disjunction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Disjunction
		public RuleCall getRightDisjunctionParserRuleCall_1_2_0() { return cRightDisjunctionParserRuleCall_1_2_0; }
	}
	public class DisjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Disjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDisjunctionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperationVerticalLineKeyword_1_1_0 = (Keyword)cOperationAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Disjunction Expression:
		//	Comparison ({Disjunction.left=current} operation='|' right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Disjunction.left=current} operation='|' right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Disjunction.left=current} operation='|' right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Disjunction.left=current}
		public Action getDisjunctionLeftAction_1_0() { return cDisjunctionLeftAction_1_0; }
		
		//operation='|'
		public Assignment getOperationAssignment_1_1() { return cOperationAssignment_1_1; }
		
		//'|'
		public Keyword getOperationVerticalLineKeyword_1_1_0() { return cOperationVerticalLineKeyword_1_1_0; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSumParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cComparisonLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperationAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOperationExclamationMarkEqualsSignKeyword_1_0_0_1_0 = (Keyword)cOperationAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cComparisonLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cOperationAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Keyword cOperationEqualsSignKeyword_1_0_1_1_0 = (Keyword)cOperationAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cComparisonLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Assignment cOperationAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final Keyword cOperationGreaterThanSignEqualsSignKeyword_1_0_2_1_0 = (Keyword)cOperationAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cComparisonLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Assignment cOperationAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final Keyword cOperationLessThanSignEqualsSignKeyword_1_0_3_1_0 = (Keyword)cOperationAssignment_1_0_3_1.eContents().get(0);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cComparisonLeftAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Assignment cOperationAssignment_1_0_4_1 = (Assignment)cGroup_1_0_4.eContents().get(1);
		private final Keyword cOperationGreaterThanSignKeyword_1_0_4_1_0 = (Keyword)cOperationAssignment_1_0_4_1.eContents().get(0);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Action cComparisonLeftAction_1_0_5_0 = (Action)cGroup_1_0_5.eContents().get(0);
		private final Assignment cOperationAssignment_1_0_5_1 = (Assignment)cGroup_1_0_5.eContents().get(1);
		private final Keyword cOperationLessThanSignKeyword_1_0_5_1_0 = (Keyword)cOperationAssignment_1_0_5_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSumParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Comparison Expression:
		//	Sum (({Comparison.left=current} operation='!=' | {Comparison.left=current} operation='=' | {Comparison.left=current}
		//	operation='>=' | {Comparison.left=current} operation='<=' | {Comparison.left=current} operation='>' |
		//	{Comparison.left=current} operation='<') right=Sum)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Sum (({Comparison.left=current} operation='!=' | {Comparison.left=current} operation='=' | {Comparison.left=current}
		//operation='>=' | {Comparison.left=current} operation='<=' | {Comparison.left=current} operation='>' |
		//{Comparison.left=current} operation='<') right=Sum)?
		public Group getGroup() { return cGroup; }
		
		//Sum
		public RuleCall getSumParserRuleCall_0() { return cSumParserRuleCall_0; }
		
		//(({Comparison.left=current} operation='!=' | {Comparison.left=current} operation='=' | {Comparison.left=current}
		//operation='>=' | {Comparison.left=current} operation='<=' | {Comparison.left=current} operation='>' |
		//{Comparison.left=current} operation='<') right=Sum)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current} operation='!=' | {Comparison.left=current} operation='=' | {Comparison.left=current}
		//operation='>=' | {Comparison.left=current} operation='<=' | {Comparison.left=current} operation='>' |
		//{Comparison.left=current} operation='<'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Comparison.left=current} operation='!='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0_0_0() { return cComparisonLeftAction_1_0_0_0; }
		
		//operation='!='
		public Assignment getOperationAssignment_1_0_0_1() { return cOperationAssignment_1_0_0_1; }
		
		//'!='
		public Keyword getOperationExclamationMarkEqualsSignKeyword_1_0_0_1_0() { return cOperationExclamationMarkEqualsSignKeyword_1_0_0_1_0; }
		
		//{Comparison.left=current} operation='='
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0_1_0() { return cComparisonLeftAction_1_0_1_0; }
		
		//operation='='
		public Assignment getOperationAssignment_1_0_1_1() { return cOperationAssignment_1_0_1_1; }
		
		//'='
		public Keyword getOperationEqualsSignKeyword_1_0_1_1_0() { return cOperationEqualsSignKeyword_1_0_1_1_0; }
		
		//{Comparison.left=current} operation='>='
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0_2_0() { return cComparisonLeftAction_1_0_2_0; }
		
		//operation='>='
		public Assignment getOperationAssignment_1_0_2_1() { return cOperationAssignment_1_0_2_1; }
		
		//'>='
		public Keyword getOperationGreaterThanSignEqualsSignKeyword_1_0_2_1_0() { return cOperationGreaterThanSignEqualsSignKeyword_1_0_2_1_0; }
		
		//{Comparison.left=current} operation='<='
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0_3_0() { return cComparisonLeftAction_1_0_3_0; }
		
		//operation='<='
		public Assignment getOperationAssignment_1_0_3_1() { return cOperationAssignment_1_0_3_1; }
		
		//'<='
		public Keyword getOperationLessThanSignEqualsSignKeyword_1_0_3_1_0() { return cOperationLessThanSignEqualsSignKeyword_1_0_3_1_0; }
		
		//{Comparison.left=current} operation='>'
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0_4_0() { return cComparisonLeftAction_1_0_4_0; }
		
		//operation='>'
		public Assignment getOperationAssignment_1_0_4_1() { return cOperationAssignment_1_0_4_1; }
		
		//'>'
		public Keyword getOperationGreaterThanSignKeyword_1_0_4_1_0() { return cOperationGreaterThanSignKeyword_1_0_4_1_0; }
		
		//{Comparison.left=current} operation='<'
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0_5_0() { return cComparisonLeftAction_1_0_5_0; }
		
		//operation='<'
		public Assignment getOperationAssignment_1_0_5_1() { return cOperationAssignment_1_0_5_1; }
		
		//'<'
		public Keyword getOperationLessThanSignKeyword_1_0_5_1_0() { return cOperationLessThanSignKeyword_1_0_5_1_0; }
		
		//right=Sum
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Sum
		public RuleCall getRightSumParserRuleCall_1_1_0() { return cRightSumParserRuleCall_1_1_0; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProductParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cSumLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperationAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOperationPlusSignKeyword_1_0_0_1_0 = (Keyword)cOperationAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cSumLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cOperationAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Keyword cOperationHyphenMinusKeyword_1_0_1_1_0 = (Keyword)cOperationAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightProductParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Sum Expression:
		//	Product (({Sum.left=current} operation='+' | {Sum.left=current} operation='-') right=Product)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Product (({Sum.left=current} operation='+' | {Sum.left=current} operation='-') right=Product)*
		public Group getGroup() { return cGroup; }
		
		//Product
		public RuleCall getProductParserRuleCall_0() { return cProductParserRuleCall_0; }
		
		//(({Sum.left=current} operation='+' | {Sum.left=current} operation='-') right=Product)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Sum.left=current} operation='+' | {Sum.left=current} operation='-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Sum.left=current} operation='+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Sum.left=current}
		public Action getSumLeftAction_1_0_0_0() { return cSumLeftAction_1_0_0_0; }
		
		//operation='+'
		public Assignment getOperationAssignment_1_0_0_1() { return cOperationAssignment_1_0_0_1; }
		
		//'+'
		public Keyword getOperationPlusSignKeyword_1_0_0_1_0() { return cOperationPlusSignKeyword_1_0_0_1_0; }
		
		//{Sum.left=current} operation='-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Sum.left=current}
		public Action getSumLeftAction_1_0_1_0() { return cSumLeftAction_1_0_1_0; }
		
		//operation='-'
		public Assignment getOperationAssignment_1_0_1_1() { return cOperationAssignment_1_0_1_1; }
		
		//'-'
		public Keyword getOperationHyphenMinusKeyword_1_0_1_1_0() { return cOperationHyphenMinusKeyword_1_0_1_1_0; }
		
		//right=Product
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Product
		public RuleCall getRightProductParserRuleCall_1_1_0() { return cRightProductParserRuleCall_1_1_0; }
	}
	public class ProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Product");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowerParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cProductLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperationAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOperationAsteriskKeyword_1_0_0_1_0 = (Keyword)cOperationAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cProductLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cOperationAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Keyword cOperationSolidusKeyword_1_0_1_1_0 = (Keyword)cOperationAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPowerParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Product Expression:
		//	Power (({Product.left=current} operation='*' | {Product.left=current} operation='/') right=Power)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Power (({Product.left=current} operation='*' | {Product.left=current} operation='/') right=Power)*
		public Group getGroup() { return cGroup; }
		
		//Power
		public RuleCall getPowerParserRuleCall_0() { return cPowerParserRuleCall_0; }
		
		//(({Product.left=current} operation='*' | {Product.left=current} operation='/') right=Power)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Product.left=current} operation='*' | {Product.left=current} operation='/'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Product.left=current} operation='*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Product.left=current}
		public Action getProductLeftAction_1_0_0_0() { return cProductLeftAction_1_0_0_0; }
		
		//operation='*'
		public Assignment getOperationAssignment_1_0_0_1() { return cOperationAssignment_1_0_0_1; }
		
		//'*'
		public Keyword getOperationAsteriskKeyword_1_0_0_1_0() { return cOperationAsteriskKeyword_1_0_0_1_0; }
		
		//{Product.left=current} operation='/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Product.left=current}
		public Action getProductLeftAction_1_0_1_0() { return cProductLeftAction_1_0_1_0; }
		
		//operation='/'
		public Assignment getOperationAssignment_1_0_1_1() { return cOperationAssignment_1_0_1_1; }
		
		//'/'
		public Keyword getOperationSolidusKeyword_1_0_1_1_0() { return cOperationSolidusKeyword_1_0_1_1_0; }
		
		//right=Power
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Power
		public RuleCall getRightPowerParserRuleCall_1_1_0() { return cRightPowerParserRuleCall_1_1_0; }
	}
	public class PowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Power");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConstructParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPowerLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPowerParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Power Expression:
		//	Construct ({Power.left=current} '^' right=Power)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Construct ({Power.left=current} '^' right=Power)?
		public Group getGroup() { return cGroup; }
		
		//Construct
		public RuleCall getConstructParserRuleCall_0() { return cConstructParserRuleCall_0; }
		
		//({Power.left=current} '^' right=Power)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Power.left=current}
		public Action getPowerLeftAction_1_0() { return cPowerLeftAction_1_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//right=Power
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Power
		public RuleCall getRightPowerParserRuleCall_1_2_0() { return cRightPowerParserRuleCall_1_2_0; }
	}
	public class ConstructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Construct");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTupleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNegativeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Construct Expression:
		//	StringLiteral | Tuple | Negative;
		@Override public ParserRule getRule() { return rule; }
		
		//StringLiteral | Tuple | Negative
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_0() { return cStringLiteralParserRuleCall_0; }
		
		//Tuple
		public RuleCall getTupleParserRuleCall_1() { return cTupleParserRuleCall_1; }
		
		//Negative
		public RuleCall getNegativeParserRuleCall_2() { return cNegativeParserRuleCall_2; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRING_LITERALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING_LITERAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING_LITERAL
		public RuleCall getValueSTRING_LITERALTerminalRuleCall_0() { return cValueSTRING_LITERALTerminalRuleCall_0; }
	}
	public class TupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Tuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cTupleAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cElementsAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cElementsConjunctionParserRuleCall_0_0_2_0 = (RuleCall)cElementsAssignment_0_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsConjunctionParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsConjunctionParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Tuple Expression:
		//	=> ({Tuple} '(' elements+=Conjunction ',') elements+=Conjunction (',' elements+=Conjunction)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//=> ({Tuple} '(' elements+=Conjunction ',') elements+=Conjunction (',' elements+=Conjunction)* ')'
		public Group getGroup() { return cGroup; }
		
		//=> ({Tuple} '(' elements+=Conjunction ',')
		public Group getGroup_0() { return cGroup_0; }
		
		//{Tuple} '(' elements+=Conjunction ','
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{Tuple}
		public Action getTupleAction_0_0_0() { return cTupleAction_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0_1() { return cLeftParenthesisKeyword_0_0_1; }
		
		//elements+=Conjunction
		public Assignment getElementsAssignment_0_0_2() { return cElementsAssignment_0_0_2; }
		
		//Conjunction
		public RuleCall getElementsConjunctionParserRuleCall_0_0_2_0() { return cElementsConjunctionParserRuleCall_0_0_2_0; }
		
		//','
		public Keyword getCommaKeyword_0_0_3() { return cCommaKeyword_0_0_3; }
		
		//elements+=Conjunction
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Conjunction
		public RuleCall getElementsConjunctionParserRuleCall_1_0() { return cElementsConjunctionParserRuleCall_1_0; }
		
		//(',' elements+=Conjunction)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//elements+=Conjunction
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//Conjunction
		public RuleCall getElementsConjunctionParserRuleCall_2_1_0() { return cElementsConjunctionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class NegativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Negative");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNegativeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTermAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTermValueParserRuleCall_0_2_0 = (RuleCall)cTermAssignment_0_2.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Negative Expression:
		//	{Negative} '-' term=Value | Value;
		@Override public ParserRule getRule() { return rule; }
		
		//{Negative} '-' term=Value | Value
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Negative} '-' term=Value
		public Group getGroup_0() { return cGroup_0; }
		
		//{Negative}
		public Action getNegativeAction_0_0() { return cNegativeAction_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//term=Value
		public Assignment getTermAssignment_0_2() { return cTermAssignment_0_2; }
		
		//Value
		public RuleCall getTermValueParserRuleCall_0_2_0() { return cTermValueParserRuleCall_0_2_0; }
		
		//Value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBracketsParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Value Expression:
		//	FunctionCall | Variable | NumberLiteral | '(' Brackets ')';
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionCall | Variable | NumberLiteral | '(' Brackets ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_0() { return cFunctionCallParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_2() { return cNumberLiteralParserRuleCall_2; }
		
		//'(' Brackets ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Brackets
		public RuleCall getBracketsParserRuleCall_3_1() { return cBracketsParserRuleCall_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0_0_0_0 = (RuleCall)cNameAssignment_1_0_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cArgumentsConjunctionParserRuleCall_1_1_0_0 = (RuleCall)cArgumentsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cArgumentsConjunctionParserRuleCall_1_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//FunctionCall Expression:
		//	{FunctionCall} (-> (name=IDENTIFIER '(') (arguments+=Conjunction (',' arguments+=Conjunction)*)? ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionCall} (-> (name=IDENTIFIER '(') (arguments+=Conjunction (',' arguments+=Conjunction)*)? ')')
		public Group getGroup() { return cGroup; }
		
		//{FunctionCall}
		public Action getFunctionCallAction_0() { return cFunctionCallAction_0; }
		
		//-> (name=IDENTIFIER '(') (arguments+=Conjunction (',' arguments+=Conjunction)*)? ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//-> (name=IDENTIFIER '(')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//name=IDENTIFIER '('
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment_1_0_0_0() { return cNameAssignment_1_0_0_0; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0_0_0_0() { return cNameIDENTIFIERTerminalRuleCall_1_0_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0_1() { return cLeftParenthesisKeyword_1_0_0_1; }
		
		//(arguments+=Conjunction (',' arguments+=Conjunction)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//arguments+=Conjunction
		public Assignment getArgumentsAssignment_1_1_0() { return cArgumentsAssignment_1_1_0; }
		
		//Conjunction
		public RuleCall getArgumentsConjunctionParserRuleCall_1_1_0_0() { return cArgumentsConjunctionParserRuleCall_1_1_0_0; }
		
		//(',' arguments+=Conjunction)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }
		
		//arguments+=Conjunction
		public Assignment getArgumentsAssignment_1_1_1_1() { return cArgumentsAssignment_1_1_1_1; }
		
		//Conjunction
		public RuleCall getArgumentsConjunctionParserRuleCall_1_1_1_1_0() { return cArgumentsConjunctionParserRuleCall_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0() { return cNameIDENTIFIERTerminalRuleCall_0; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class BracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.Brackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBracketsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentExpressionParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		
		//Brackets Expression:
		//	{Brackets} content=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{Brackets} content=Expression
		public Group getGroup() { return cGroup; }
		
		//{Brackets}
		public Action getBracketsAction_0() { return cBracketsAction_0; }
		
		//content=Expression
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }
		
		//Expression
		public RuleCall getContentExpressionParserRuleCall_1_0() { return cContentExpressionParserRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final ParameterListElements pParameterList;
	private final ParameterElements pParameter;
	private final WitnessListElements pWitnessList;
	private final WitnessElements pWitness;
	private final ExpressionElements pExpression;
	private final ConjunctionElements pConjunction;
	private final DisjunctionElements pDisjunction;
	private final ComparisonElements pComparison;
	private final SumElements pSum;
	private final ProductElements pProduct;
	private final PowerElements pPower;
	private final ConstructElements pConstruct;
	private final StringLiteralElements pStringLiteral;
	private final TupleElements pTuple;
	private final NegativeElements pNegative;
	private final ValueElements pValue;
	private final FunctionCallElements pFunctionCall;
	private final VariableElements pVariable;
	private final NumberLiteralElements pNumberLiteral;
	private final BracketsElements pBrackets;
	private final TerminalRule tINT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWHITESPACE;
	private final TerminalRule tIDENTIFIER;
	private final TerminalRule tSTRING_LITERAL;
	
	private final Grammar grammar;

	@Inject
	public ZeroKnowledgeGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pParameterList = new ParameterListElements();
		this.pParameter = new ParameterElements();
		this.pWitnessList = new WitnessListElements();
		this.pWitness = new WitnessElements();
		this.pExpression = new ExpressionElements();
		this.pConjunction = new ConjunctionElements();
		this.pDisjunction = new DisjunctionElements();
		this.pComparison = new ComparisonElements();
		this.pSum = new SumElements();
		this.pProduct = new ProductElements();
		this.pPower = new PowerElements();
		this.pConstruct = new ConstructElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pTuple = new TupleElements();
		this.pNegative = new NegativeElements();
		this.pValue = new ValueElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pVariable = new VariableElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pBrackets = new BracketsElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.INT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.SL_COMMENT");
		this.tWHITESPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.WHITESPACE");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.IDENTIFIER");
		this.tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.crypto.zeroknowledge.ZeroKnowledge.STRING_LITERAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.upb.crypto.zeroknowledge.ZeroKnowledge".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	functions+=FunctionDefinition* witnessList=WitnessList ';'? proof=Expression ';'?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//FunctionDefinition:
	//	name=IDENTIFIER parameterList=ParameterList '{' body=Expression '}' ';'?;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}
	
	//ParameterList:
	//	'(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')';
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//Parameter:
	//	name=IDENTIFIER;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//WitnessList:
	//	'(' witnesses+=Witness? (',' witnesses+=Witness)* ')';
	public WitnessListElements getWitnessListAccess() {
		return pWitnessList;
	}
	
	public ParserRule getWitnessListRule() {
		return getWitnessListAccess().getRule();
	}
	
	//Witness:
	//	name=IDENTIFIER testing?="?"?;
	public WitnessElements getWitnessAccess() {
		return pWitness;
	}
	
	public ParserRule getWitnessRule() {
		return getWitnessAccess().getRule();
	}
	
	//Expression:
	//	Conjunction;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Conjunction Expression:
	//	Disjunction ({Conjunction.left=current} operation='&' right=Disjunction)*;
	public ConjunctionElements getConjunctionAccess() {
		return pConjunction;
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}
	
	//Disjunction Expression:
	//	Comparison ({Disjunction.left=current} operation='|' right=Comparison)*;
	public DisjunctionElements getDisjunctionAccess() {
		return pDisjunction;
	}
	
	public ParserRule getDisjunctionRule() {
		return getDisjunctionAccess().getRule();
	}
	
	//Comparison Expression:
	//	Sum (({Comparison.left=current} operation='!=' | {Comparison.left=current} operation='=' | {Comparison.left=current}
	//	operation='>=' | {Comparison.left=current} operation='<=' | {Comparison.left=current} operation='>' |
	//	{Comparison.left=current} operation='<') right=Sum)?;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Sum Expression:
	//	Product (({Sum.left=current} operation='+' | {Sum.left=current} operation='-') right=Product)*;
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//Product Expression:
	//	Power (({Product.left=current} operation='*' | {Product.left=current} operation='/') right=Power)*;
	public ProductElements getProductAccess() {
		return pProduct;
	}
	
	public ParserRule getProductRule() {
		return getProductAccess().getRule();
	}
	
	//Power Expression:
	//	Construct ({Power.left=current} '^' right=Power)?;
	public PowerElements getPowerAccess() {
		return pPower;
	}
	
	public ParserRule getPowerRule() {
		return getPowerAccess().getRule();
	}
	
	//Construct Expression:
	//	StringLiteral | Tuple | Negative;
	public ConstructElements getConstructAccess() {
		return pConstruct;
	}
	
	public ParserRule getConstructRule() {
		return getConstructAccess().getRule();
	}
	
	//StringLiteral:
	//	value=STRING_LITERAL;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//Tuple Expression:
	//	=> ({Tuple} '(' elements+=Conjunction ',') elements+=Conjunction (',' elements+=Conjunction)* ')';
	public TupleElements getTupleAccess() {
		return pTuple;
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}
	
	//Negative Expression:
	//	{Negative} '-' term=Value | Value;
	public NegativeElements getNegativeAccess() {
		return pNegative;
	}
	
	public ParserRule getNegativeRule() {
		return getNegativeAccess().getRule();
	}
	
	//Value Expression:
	//	FunctionCall | Variable | NumberLiteral | '(' Brackets ')';
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//FunctionCall Expression:
	//	{FunctionCall} (-> (name=IDENTIFIER '(') (arguments+=Conjunction (',' arguments+=Conjunction)*)? ')');
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//Variable:
	//	name=IDENTIFIER;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//NumberLiteral:
	//	value=INT;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//Brackets Expression:
	//	{Brackets} content=Expression;
	public BracketsElements getBracketsAccess() {
		return pBrackets;
	}
	
	public ParserRule getBracketsRule() {
		return getBracketsAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WHITESPACE:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWHITESPACERule() {
		return tWHITESPACE;
	}
	
	//terminal IDENTIFIER:
	//	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '\'')*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//terminal STRING_LITERAL:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRING_LITERALRule() {
		return tSTRING_LITERAL;
	}
}
