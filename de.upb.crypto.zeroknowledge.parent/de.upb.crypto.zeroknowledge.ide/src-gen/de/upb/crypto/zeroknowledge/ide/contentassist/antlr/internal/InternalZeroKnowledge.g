/*
 * generated by Xtext 2.17.0
 */
grammar InternalZeroKnowledge;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package de.upb.crypto.zeroknowledge.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.upb.crypto.zeroknowledge.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.upb.crypto.zeroknowledge.services.ZeroKnowledgeGrammarAccess;

}
@parser::members {
	private ZeroKnowledgeGrammarAccess grammarAccess;

	public void setGrammarAccess(ZeroKnowledgeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition
:
{ before(grammarAccess.getFunctionDefinitionRule()); }
	 ruleFunctionDefinition
{ after(grammarAccess.getFunctionDefinitionRule()); } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getGroup()); }
		(rule__FunctionDefinition__Group__0)
		{ after(grammarAccess.getFunctionDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterList
entryRuleParameterList
:
{ before(grammarAccess.getParameterListRule()); }
	 ruleParameterList
{ after(grammarAccess.getParameterListRule()); } 
	 EOF 
;

// Rule ParameterList
ruleParameterList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterListAccess().getGroup()); }
		(rule__ParameterList__Group__0)
		{ after(grammarAccess.getParameterListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getNameAssignment()); }
		(rule__Parameter__NameAssignment)
		{ after(grammarAccess.getParameterAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWitnessList
entryRuleWitnessList
:
{ before(grammarAccess.getWitnessListRule()); }
	 ruleWitnessList
{ after(grammarAccess.getWitnessListRule()); } 
	 EOF 
;

// Rule WitnessList
ruleWitnessList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWitnessListAccess().getGroup()); }
		(rule__WitnessList__Group__0)
		{ after(grammarAccess.getWitnessListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWitness
entryRuleWitness
:
{ before(grammarAccess.getWitnessRule()); }
	 ruleWitness
{ after(grammarAccess.getWitnessRule()); } 
	 EOF 
;

// Rule Witness
ruleWitness 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWitnessAccess().getGroup()); }
		(rule__Witness__Group__0)
		{ after(grammarAccess.getWitnessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getConjunctionParserRuleCall()); }
		ruleConjunction
		{ after(grammarAccess.getExpressionAccess().getConjunctionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConjunction
entryRuleConjunction
:
{ before(grammarAccess.getConjunctionRule()); }
	 ruleConjunction
{ after(grammarAccess.getConjunctionRule()); } 
	 EOF 
;

// Rule Conjunction
ruleConjunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConjunctionAccess().getGroup()); }
		(rule__Conjunction__Group__0)
		{ after(grammarAccess.getConjunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDisjunction
entryRuleDisjunction
:
{ before(grammarAccess.getDisjunctionRule()); }
	 ruleDisjunction
{ after(grammarAccess.getDisjunctionRule()); } 
	 EOF 
;

// Rule Disjunction
ruleDisjunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDisjunctionAccess().getGroup()); }
		(rule__Disjunction__Group__0)
		{ after(grammarAccess.getDisjunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSum
entryRuleSum
:
{ before(grammarAccess.getSumRule()); }
	 ruleSum
{ after(grammarAccess.getSumRule()); } 
	 EOF 
;

// Rule Sum
ruleSum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSumAccess().getGroup()); }
		(rule__Sum__Group__0)
		{ after(grammarAccess.getSumAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProduct
entryRuleProduct
:
{ before(grammarAccess.getProductRule()); }
	 ruleProduct
{ after(grammarAccess.getProductRule()); } 
	 EOF 
;

// Rule Product
ruleProduct 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProductAccess().getGroup()); }
		(rule__Product__Group__0)
		{ after(grammarAccess.getProductAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePower
entryRulePower
:
{ before(grammarAccess.getPowerRule()); }
	 rulePower
{ after(grammarAccess.getPowerRule()); } 
	 EOF 
;

// Rule Power
rulePower 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPowerAccess().getGroup()); }
		(rule__Power__Group__0)
		{ after(grammarAccess.getPowerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstruct
entryRuleConstruct
:
{ before(grammarAccess.getConstructRule()); }
	 ruleConstruct
{ after(grammarAccess.getConstructRule()); } 
	 EOF 
;

// Rule Construct
ruleConstruct 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstructAccess().getAlternatives()); }
		(rule__Construct__Alternatives)
		{ after(grammarAccess.getConstructAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
		(rule__StringLiteral__ValueAssignment)
		{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTuple
entryRuleTuple
:
{ before(grammarAccess.getTupleRule()); }
	 ruleTuple
{ after(grammarAccess.getTupleRule()); } 
	 EOF 
;

// Rule Tuple
ruleTuple 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTupleAccess().getGroup()); }
		(rule__Tuple__Group__0)
		{ after(grammarAccess.getTupleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegative
entryRuleNegative
:
{ before(grammarAccess.getNegativeRule()); }
	 ruleNegative
{ after(grammarAccess.getNegativeRule()); } 
	 EOF 
;

// Rule Negative
ruleNegative 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegativeAccess().getAlternatives()); }
		(rule__Negative__Alternatives)
		{ after(grammarAccess.getNegativeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
		(rule__FunctionCall__Group__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getNameAssignment()); }
		(rule__Variable__NameAssignment)
		{ after(grammarAccess.getVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
		(rule__NumberLiteral__ValueAssignment)
		{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBrackets
entryRuleBrackets
:
{ before(grammarAccess.getBracketsRule()); }
	 ruleBrackets
{ after(grammarAccess.getBracketsRule()); } 
	 EOF 
;

// Rule Brackets
ruleBrackets 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBracketsAccess().getGroup()); }
		(rule__Brackets__Group__0)
		{ after(grammarAccess.getBracketsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
		(rule__Comparison__Group_1_0_0__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_0_1()); }
		(rule__Comparison__Group_1_0_1__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_0_2()); }
		(rule__Comparison__Group_1_0_2__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_0_3()); }
		(rule__Comparison__Group_1_0_3__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_0_4()); }
		(rule__Comparison__Group_1_0_4__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_0_5()); }
		(rule__Comparison__Group_1_0_5__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSumAccess().getGroup_1_0_0()); }
		(rule__Sum__Group_1_0_0__0)
		{ after(grammarAccess.getSumAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSumAccess().getGroup_1_0_1()); }
		(rule__Sum__Group_1_0_1__0)
		{ after(grammarAccess.getSumAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProductAccess().getGroup_1_0_0()); }
		(rule__Product__Group_1_0_0__0)
		{ after(grammarAccess.getProductAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getProductAccess().getGroup_1_0_1()); }
		(rule__Product__Group_1_0_1__0)
		{ after(grammarAccess.getProductAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Construct__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructAccess().getStringLiteralParserRuleCall_0()); }
		ruleStringLiteral
		{ after(grammarAccess.getConstructAccess().getStringLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstructAccess().getTupleParserRuleCall_1()); }
		(ruleTuple)
		{ after(grammarAccess.getConstructAccess().getTupleParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getConstructAccess().getNegativeParserRuleCall_2()); }
		ruleNegative
		{ after(grammarAccess.getConstructAccess().getNegativeParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegativeAccess().getGroup_0()); }
		(rule__Negative__Group_0__0)
		{ after(grammarAccess.getNegativeAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNegativeAccess().getValueParserRuleCall_1()); }
		ruleValue
		{ after(grammarAccess.getNegativeAccess().getValueParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getFunctionCallParserRuleCall_0()); }
		ruleFunctionCall
		{ after(grammarAccess.getValueAccess().getFunctionCallParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getVariableParserRuleCall_1()); }
		ruleVariable
		{ after(grammarAccess.getValueAccess().getVariableParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getNumberLiteralParserRuleCall_2()); }
		ruleNumberLiteral
		{ after(grammarAccess.getValueAccess().getNumberLiteralParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getGroup_3()); }
		(rule__Value__Group_3__0)
		{ after(grammarAccess.getValueAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getFunctionsAssignment_0()); }
	(rule__Model__FunctionsAssignment_0)*
	{ after(grammarAccess.getModelAccess().getFunctionsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getWitnessListAssignment_1()); }
	(rule__Model__WitnessListAssignment_1)
	{ after(grammarAccess.getModelAccess().getWitnessListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getSemicolonKeyword_2()); }
	(';')?
	{ after(grammarAccess.getModelAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getProofAssignment_3()); }
	(rule__Model__ProofAssignment_3)
	{ after(grammarAccess.getModelAccess().getProofAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getSemicolonKeyword_4()); }
	(';')?
	{ after(grammarAccess.getModelAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__0__Impl
	rule__FunctionDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_0()); }
	(rule__FunctionDefinition__NameAssignment_0)
	{ after(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__1__Impl
	rule__FunctionDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getParameterListAssignment_1()); }
	(rule__FunctionDefinition__ParameterListAssignment_1)
	{ after(grammarAccess.getFunctionDefinitionAccess().getParameterListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__2__Impl
	rule__FunctionDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getFunctionDefinitionAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__3__Impl
	rule__FunctionDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getBodyAssignment_3()); }
	(rule__FunctionDefinition__BodyAssignment_3)
	{ after(grammarAccess.getFunctionDefinitionAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__4__Impl
	rule__FunctionDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getFunctionDefinitionAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getSemicolonKeyword_5()); }
	(';')?
	{ after(grammarAccess.getFunctionDefinitionAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__0__Impl
	rule__ParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__1__Impl
	rule__ParameterList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getGroup_1()); }
	(rule__ParameterList__Group_1__0)?
	{ after(grammarAccess.getParameterListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getParameterListAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_1__0__Impl
	rule__ParameterList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParametersAssignment_1_0()); }
	(rule__ParameterList__ParametersAssignment_1_0)
	{ after(grammarAccess.getParameterListAccess().getParametersAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getGroup_1_1()); }
	(rule__ParameterList__Group_1_1__0)*
	{ after(grammarAccess.getParameterListAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_1_1__0__Impl
	rule__ParameterList__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getCommaKeyword_1_1_0()); }
	','
	{ after(grammarAccess.getParameterListAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParametersAssignment_1_1_1()); }
	(rule__ParameterList__ParametersAssignment_1_1_1)
	{ after(grammarAccess.getParameterListAccess().getParametersAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WitnessList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WitnessList__Group__0__Impl
	rule__WitnessList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WitnessList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWitnessListAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getWitnessListAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WitnessList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WitnessList__Group__1__Impl
	rule__WitnessList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WitnessList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWitnessListAccess().getWitnessesAssignment_1()); }
	(rule__WitnessList__WitnessesAssignment_1)?
	{ after(grammarAccess.getWitnessListAccess().getWitnessesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WitnessList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WitnessList__Group__2__Impl
	rule__WitnessList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WitnessList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWitnessListAccess().getGroup_2()); }
	(rule__WitnessList__Group_2__0)*
	{ after(grammarAccess.getWitnessListAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WitnessList__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WitnessList__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WitnessList__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWitnessListAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getWitnessListAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WitnessList__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WitnessList__Group_2__0__Impl
	rule__WitnessList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WitnessList__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWitnessListAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getWitnessListAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WitnessList__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WitnessList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WitnessList__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWitnessListAccess().getWitnessesAssignment_2_1()); }
	(rule__WitnessList__WitnessesAssignment_2_1)
	{ after(grammarAccess.getWitnessListAccess().getWitnessesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Witness__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Witness__Group__0__Impl
	rule__Witness__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Witness__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWitnessAccess().getNameAssignment_0()); }
	(rule__Witness__NameAssignment_0)
	{ after(grammarAccess.getWitnessAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Witness__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Witness__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Witness__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWitnessAccess().getTestingAssignment_1()); }
	(rule__Witness__TestingAssignment_1)?
	{ after(grammarAccess.getWitnessAccess().getTestingAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group__0__Impl
	rule__Conjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getDisjunctionParserRuleCall_0()); }
	ruleDisjunction
	{ after(grammarAccess.getConjunctionAccess().getDisjunctionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getGroup_1()); }
	(rule__Conjunction__Group_1__0)*
	{ after(grammarAccess.getConjunctionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group_1__0__Impl
	rule__Conjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getConjunctionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getConjunctionAccess().getConjunctionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group_1__1__Impl
	rule__Conjunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getOperationAssignment_1_1()); }
	(rule__Conjunction__OperationAssignment_1_1)
	{ after(grammarAccess.getConjunctionAccess().getOperationAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conjunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAccess().getRightAssignment_1_2()); }
	(rule__Conjunction__RightAssignment_1_2)
	{ after(grammarAccess.getConjunctionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Disjunction__Group__0__Impl
	rule__Disjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
	{ after(grammarAccess.getDisjunctionAccess().getComparisonParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Disjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAccess().getGroup_1()); }
	(rule__Disjunction__Group_1__0)*
	{ after(grammarAccess.getDisjunctionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Disjunction__Group_1__0__Impl
	rule__Disjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAccess().getDisjunctionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getDisjunctionAccess().getDisjunctionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Disjunction__Group_1__1__Impl
	rule__Disjunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAccess().getOperationAssignment_1_1()); }
	(rule__Disjunction__OperationAssignment_1_1)
	{ after(grammarAccess.getDisjunctionAccess().getOperationAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Disjunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAccess().getRightAssignment_1_2()); }
	(rule__Disjunction__RightAssignment_1_2)
	{ after(grammarAccess.getDisjunctionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getSumParserRuleCall_0()); }
	ruleSum
	{ after(grammarAccess.getComparisonAccess().getSumParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
	(rule__Comparison__Group_1__0)?
	{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getAlternatives_1_0()); }
	(rule__Comparison__Alternatives_1_0)
	{ after(grammarAccess.getComparisonAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
	(rule__Comparison__RightAssignment_1_1)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_0__0__Impl
	rule__Comparison__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_0_1()); }
	(rule__Comparison__OperationAssignment_1_0_0_1)
	{ after(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_1__0__Impl
	rule__Comparison__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_1_1()); }
	(rule__Comparison__OperationAssignment_1_0_1_1)
	{ after(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_2__0__Impl
	rule__Comparison__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_2_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_2_1()); }
	(rule__Comparison__OperationAssignment_1_0_2_1)
	{ after(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_3__0__Impl
	rule__Comparison__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_3_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_3_1()); }
	(rule__Comparison__OperationAssignment_1_0_3_1)
	{ after(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_4__0__Impl
	rule__Comparison__Group_1_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_4_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_4_1()); }
	(rule__Comparison__OperationAssignment_1_0_4_1)
	{ after(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_5__0__Impl
	rule__Comparison__Group_1_0_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_5_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_5_1()); }
	(rule__Comparison__OperationAssignment_1_0_5_1)
	{ after(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sum__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group__0__Impl
	rule__Sum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getProductParserRuleCall_0()); }
	ruleProduct
	{ after(grammarAccess.getSumAccess().getProductParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getGroup_1()); }
	(rule__Sum__Group_1__0)*
	{ after(grammarAccess.getSumAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sum__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group_1__0__Impl
	rule__Sum__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getAlternatives_1_0()); }
	(rule__Sum__Alternatives_1_0)
	{ after(grammarAccess.getSumAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getRightAssignment_1_1()); }
	(rule__Sum__RightAssignment_1_1)
	{ after(grammarAccess.getSumAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sum__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group_1_0_0__0__Impl
	rule__Sum__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getSumLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getSumAccess().getSumLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getOperationAssignment_1_0_0_1()); }
	(rule__Sum__OperationAssignment_1_0_0_1)
	{ after(grammarAccess.getSumAccess().getOperationAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sum__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group_1_0_1__0__Impl
	rule__Sum__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getSumLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getSumAccess().getSumLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getOperationAssignment_1_0_1_1()); }
	(rule__Sum__OperationAssignment_1_0_1_1)
	{ after(grammarAccess.getSumAccess().getOperationAssignment_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Product__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group__0__Impl
	rule__Product__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getPowerParserRuleCall_0()); }
	rulePower
	{ after(grammarAccess.getProductAccess().getPowerParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getGroup_1()); }
	(rule__Product__Group_1__0)*
	{ after(grammarAccess.getProductAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Product__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group_1__0__Impl
	rule__Product__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getAlternatives_1_0()); }
	(rule__Product__Alternatives_1_0)
	{ after(grammarAccess.getProductAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getRightAssignment_1_1()); }
	(rule__Product__RightAssignment_1_1)
	{ after(grammarAccess.getProductAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Product__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group_1_0_0__0__Impl
	rule__Product__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getProductLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getProductAccess().getProductLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getOperationAssignment_1_0_0_1()); }
	(rule__Product__OperationAssignment_1_0_0_1)
	{ after(grammarAccess.getProductAccess().getOperationAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Product__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group_1_0_1__0__Impl
	rule__Product__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getProductLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getProductAccess().getProductLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Product__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProductAccess().getOperationAssignment_1_0_1_1()); }
	(rule__Product__OperationAssignment_1_0_1_1)
	{ after(grammarAccess.getProductAccess().getOperationAssignment_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Power__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Power__Group__0__Impl
	rule__Power__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerAccess().getConstructParserRuleCall_0()); }
	ruleConstruct
	{ after(grammarAccess.getPowerAccess().getConstructParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Power__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerAccess().getGroup_1()); }
	(rule__Power__Group_1__0)?
	{ after(grammarAccess.getPowerAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Power__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Power__Group_1__0__Impl
	rule__Power__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerAccess().getPowerLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPowerAccess().getPowerLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Power__Group_1__1__Impl
	rule__Power__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerAccess().getCircumflexAccentKeyword_1_1()); }
	'^'
	{ after(grammarAccess.getPowerAccess().getCircumflexAccentKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Power__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerAccess().getRightAssignment_1_2()); }
	(rule__Power__RightAssignment_1_2)
	{ after(grammarAccess.getPowerAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tuple__Group__0__Impl
	rule__Tuple__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTupleAccess().getGroup_0()); }
	(rule__Tuple__Group_0__0)
	{ after(grammarAccess.getTupleAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tuple__Group__1__Impl
	rule__Tuple__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTupleAccess().getElementsAssignment_1()); }
	(rule__Tuple__ElementsAssignment_1)
	{ after(grammarAccess.getTupleAccess().getElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tuple__Group__2__Impl
	rule__Tuple__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTupleAccess().getGroup_2()); }
	(rule__Tuple__Group_2__0)*
	{ after(grammarAccess.getTupleAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tuple__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTupleAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getTupleAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tuple__Group_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTupleAccess().getGroup_0_0()); }
	(rule__Tuple__Group_0_0__0)
	{ after(grammarAccess.getTupleAccess().getGroup_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tuple__Group_0_0__0__Impl
	rule__Tuple__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTupleAccess().getTupleAction_0_0_0()); }
	()
	{ after(grammarAccess.getTupleAccess().getTupleAction_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tuple__Group_0_0__1__Impl
	rule__Tuple__Group_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTupleAccess().getLeftParenthesisKeyword_0_0_1()); }
	'('
	{ after(grammarAccess.getTupleAccess().getLeftParenthesisKeyword_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_0_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tuple__Group_0_0__2__Impl
	rule__Tuple__Group_0_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_0_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTupleAccess().getElementsAssignment_0_0_2()); }
	(rule__Tuple__ElementsAssignment_0_0_2)
	{ after(grammarAccess.getTupleAccess().getElementsAssignment_0_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_0_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tuple__Group_0_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_0_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTupleAccess().getCommaKeyword_0_0_3()); }
	','
	{ after(grammarAccess.getTupleAccess().getCommaKeyword_0_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tuple__Group_2__0__Impl
	rule__Tuple__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTupleAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getTupleAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tuple__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTupleAccess().getElementsAssignment_2_1()); }
	(rule__Tuple__ElementsAssignment_2_1)
	{ after(grammarAccess.getTupleAccess().getElementsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Negative__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negative__Group_0__0__Impl
	rule__Negative__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeAccess().getNegativeAction_0_0()); }
	()
	{ after(grammarAccess.getNegativeAccess().getNegativeAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negative__Group_0__1__Impl
	rule__Negative__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeAccess().getHyphenMinusKeyword_0_1()); }
	'-'
	{ after(grammarAccess.getNegativeAccess().getHyphenMinusKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negative__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeAccess().getTermAssignment_0_2()); }
	(rule__Negative__TermAssignment_0_2)
	{ after(grammarAccess.getNegativeAccess().getTermAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group_3__0__Impl
	rule__Value__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getValueAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group_3__1__Impl
	rule__Value__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getBracketsParserRuleCall_3_1()); }
	ruleBrackets
	{ after(grammarAccess.getValueAccess().getBracketsParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getRightParenthesisKeyword_3_2()); }
	')'
	{ after(grammarAccess.getValueAccess().getRightParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
	()
	{ after(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_1()); }
	(rule__FunctionCall__Group_1__0)
	{ after(grammarAccess.getFunctionCallAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1__0__Impl
	rule__FunctionCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_1_0()); }
	(rule__FunctionCall__Group_1_0__0)
	{ after(grammarAccess.getFunctionCallAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1__1__Impl
	rule__FunctionCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_1_1()); }
	(rule__FunctionCall__Group_1_1__0)?
	{ after(grammarAccess.getFunctionCallAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_1_0_0()); }
	(rule__FunctionCall__Group_1_0_0__0)
	{ after(grammarAccess.getFunctionCallAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1_0_0__0__Impl
	rule__FunctionCall__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getNameAssignment_1_0_0_0()); }
	(rule__FunctionCall__NameAssignment_1_0_0_0)
	{ after(grammarAccess.getFunctionCallAccess().getNameAssignment_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_0_0_1()); }
	'('
	{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1_1__0__Impl
	rule__FunctionCall__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_1_1_0()); }
	(rule__FunctionCall__ArgumentsAssignment_1_1_0)
	{ after(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_1_1_1()); }
	(rule__FunctionCall__Group_1_1_1__0)*
	{ after(grammarAccess.getFunctionCallAccess().getGroup_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1_1_1__0__Impl
	rule__FunctionCall__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_1_1_1_0()); }
	','
	{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_1_1_1_1()); }
	(rule__FunctionCall__ArgumentsAssignment_1_1_1_1)
	{ after(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Brackets__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Brackets__Group__0__Impl
	rule__Brackets__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Brackets__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBracketsAccess().getBracketsAction_0()); }
	()
	{ after(grammarAccess.getBracketsAccess().getBracketsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brackets__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Brackets__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Brackets__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBracketsAccess().getContentAssignment_1()); }
	(rule__Brackets__ContentAssignment_1)
	{ after(grammarAccess.getBracketsAccess().getContentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__FunctionsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getFunctionsFunctionDefinitionParserRuleCall_0_0()); }
		ruleFunctionDefinition
		{ after(grammarAccess.getModelAccess().getFunctionsFunctionDefinitionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__WitnessListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getWitnessListWitnessListParserRuleCall_1_0()); }
		ruleWitnessList
		{ after(grammarAccess.getModelAccess().getWitnessListWitnessListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ProofAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProofExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getModelAccess().getProofExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getNameIDENTIFIERTerminalRuleCall_0_0()); }
		RULE_IDENTIFIER
		{ after(grammarAccess.getFunctionDefinitionAccess().getNameIDENTIFIERTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__ParameterListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getParameterListParameterListParserRuleCall_1_0()); }
		ruleParameterList
		{ after(grammarAccess.getFunctionDefinitionAccess().getParameterListParameterListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getBodyExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionDefinitionAccess().getBodyExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParametersAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_1_0_0()); }
		ruleParameter
		{ after(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParametersAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_1_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameIDENTIFIERTerminalRuleCall_0()); }
		RULE_IDENTIFIER
		{ after(grammarAccess.getParameterAccess().getNameIDENTIFIERTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WitnessList__WitnessesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWitnessListAccess().getWitnessesWitnessParserRuleCall_1_0()); }
		ruleWitness
		{ after(grammarAccess.getWitnessListAccess().getWitnessesWitnessParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WitnessList__WitnessesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWitnessListAccess().getWitnessesWitnessParserRuleCall_2_1_0()); }
		ruleWitness
		{ after(grammarAccess.getWitnessListAccess().getWitnessesWitnessParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Witness__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWitnessAccess().getNameIDENTIFIERTerminalRuleCall_0_0()); }
		RULE_IDENTIFIER
		{ after(grammarAccess.getWitnessAccess().getNameIDENTIFIERTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Witness__TestingAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWitnessAccess().getTestingQuestionMarkKeyword_1_0()); }
		(
			{ before(grammarAccess.getWitnessAccess().getTestingQuestionMarkKeyword_1_0()); }
			'?'
			{ after(grammarAccess.getWitnessAccess().getTestingQuestionMarkKeyword_1_0()); }
		)
		{ after(grammarAccess.getWitnessAccess().getTestingQuestionMarkKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__OperationAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConjunctionAccess().getOperationAmpersandKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getConjunctionAccess().getOperationAmpersandKeyword_1_1_0()); }
			'&'
			{ after(grammarAccess.getConjunctionAccess().getOperationAmpersandKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getConjunctionAccess().getOperationAmpersandKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConjunctionAccess().getRightDisjunctionParserRuleCall_1_2_0()); }
		ruleDisjunction
		{ after(grammarAccess.getConjunctionAccess().getRightDisjunctionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__OperationAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDisjunctionAccess().getOperationVerticalLineKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getDisjunctionAccess().getOperationVerticalLineKeyword_1_1_0()); }
			'|'
			{ after(grammarAccess.getDisjunctionAccess().getOperationVerticalLineKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getDisjunctionAccess().getOperationVerticalLineKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDisjunctionAccess().getRightComparisonParserRuleCall_1_2_0()); }
		ruleComparison
		{ after(grammarAccess.getDisjunctionAccess().getRightComparisonParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperationAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOperationExclamationMarkEqualsSignKeyword_1_0_0_1_0()); }
		(
			{ before(grammarAccess.getComparisonAccess().getOperationExclamationMarkEqualsSignKeyword_1_0_0_1_0()); }
			'!='
			{ after(grammarAccess.getComparisonAccess().getOperationExclamationMarkEqualsSignKeyword_1_0_0_1_0()); }
		)
		{ after(grammarAccess.getComparisonAccess().getOperationExclamationMarkEqualsSignKeyword_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperationAssignment_1_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOperationEqualsSignKeyword_1_0_1_1_0()); }
		(
			{ before(grammarAccess.getComparisonAccess().getOperationEqualsSignKeyword_1_0_1_1_0()); }
			'='
			{ after(grammarAccess.getComparisonAccess().getOperationEqualsSignKeyword_1_0_1_1_0()); }
		)
		{ after(grammarAccess.getComparisonAccess().getOperationEqualsSignKeyword_1_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperationAssignment_1_0_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOperationGreaterThanSignEqualsSignKeyword_1_0_2_1_0()); }
		(
			{ before(grammarAccess.getComparisonAccess().getOperationGreaterThanSignEqualsSignKeyword_1_0_2_1_0()); }
			'>='
			{ after(grammarAccess.getComparisonAccess().getOperationGreaterThanSignEqualsSignKeyword_1_0_2_1_0()); }
		)
		{ after(grammarAccess.getComparisonAccess().getOperationGreaterThanSignEqualsSignKeyword_1_0_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperationAssignment_1_0_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOperationLessThanSignEqualsSignKeyword_1_0_3_1_0()); }
		(
			{ before(grammarAccess.getComparisonAccess().getOperationLessThanSignEqualsSignKeyword_1_0_3_1_0()); }
			'<='
			{ after(grammarAccess.getComparisonAccess().getOperationLessThanSignEqualsSignKeyword_1_0_3_1_0()); }
		)
		{ after(grammarAccess.getComparisonAccess().getOperationLessThanSignEqualsSignKeyword_1_0_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperationAssignment_1_0_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOperationGreaterThanSignKeyword_1_0_4_1_0()); }
		(
			{ before(grammarAccess.getComparisonAccess().getOperationGreaterThanSignKeyword_1_0_4_1_0()); }
			'>'
			{ after(grammarAccess.getComparisonAccess().getOperationGreaterThanSignKeyword_1_0_4_1_0()); }
		)
		{ after(grammarAccess.getComparisonAccess().getOperationGreaterThanSignKeyword_1_0_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperationAssignment_1_0_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOperationLessThanSignKeyword_1_0_5_1_0()); }
		(
			{ before(grammarAccess.getComparisonAccess().getOperationLessThanSignKeyword_1_0_5_1_0()); }
			'<'
			{ after(grammarAccess.getComparisonAccess().getOperationLessThanSignKeyword_1_0_5_1_0()); }
		)
		{ after(grammarAccess.getComparisonAccess().getOperationLessThanSignKeyword_1_0_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightSumParserRuleCall_1_1_0()); }
		ruleSum
		{ after(grammarAccess.getComparisonAccess().getRightSumParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__OperationAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSumAccess().getOperationPlusSignKeyword_1_0_0_1_0()); }
		(
			{ before(grammarAccess.getSumAccess().getOperationPlusSignKeyword_1_0_0_1_0()); }
			'+'
			{ after(grammarAccess.getSumAccess().getOperationPlusSignKeyword_1_0_0_1_0()); }
		)
		{ after(grammarAccess.getSumAccess().getOperationPlusSignKeyword_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__OperationAssignment_1_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSumAccess().getOperationHyphenMinusKeyword_1_0_1_1_0()); }
		(
			{ before(grammarAccess.getSumAccess().getOperationHyphenMinusKeyword_1_0_1_1_0()); }
			'-'
			{ after(grammarAccess.getSumAccess().getOperationHyphenMinusKeyword_1_0_1_1_0()); }
		)
		{ after(grammarAccess.getSumAccess().getOperationHyphenMinusKeyword_1_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSumAccess().getRightProductParserRuleCall_1_1_0()); }
		ruleProduct
		{ after(grammarAccess.getSumAccess().getRightProductParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__OperationAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProductAccess().getOperationAsteriskKeyword_1_0_0_1_0()); }
		(
			{ before(grammarAccess.getProductAccess().getOperationAsteriskKeyword_1_0_0_1_0()); }
			'*'
			{ after(grammarAccess.getProductAccess().getOperationAsteriskKeyword_1_0_0_1_0()); }
		)
		{ after(grammarAccess.getProductAccess().getOperationAsteriskKeyword_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__OperationAssignment_1_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProductAccess().getOperationSolidusKeyword_1_0_1_1_0()); }
		(
			{ before(grammarAccess.getProductAccess().getOperationSolidusKeyword_1_0_1_1_0()); }
			'/'
			{ after(grammarAccess.getProductAccess().getOperationSolidusKeyword_1_0_1_1_0()); }
		)
		{ after(grammarAccess.getProductAccess().getOperationSolidusKeyword_1_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Product__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProductAccess().getRightPowerParserRuleCall_1_1_0()); }
		rulePower
		{ after(grammarAccess.getProductAccess().getRightPowerParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerAccess().getRightPowerParserRuleCall_1_2_0()); }
		rulePower
		{ after(grammarAccess.getPowerAccess().getRightPowerParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueSTRING_LITERALTerminalRuleCall_0()); }
		RULE_STRING_LITERAL
		{ after(grammarAccess.getStringLiteralAccess().getValueSTRING_LITERALTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__ElementsAssignment_0_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTupleAccess().getElementsConjunctionParserRuleCall_0_0_2_0()); }
		ruleConjunction
		{ after(grammarAccess.getTupleAccess().getElementsConjunctionParserRuleCall_0_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__ElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTupleAccess().getElementsConjunctionParserRuleCall_1_0()); }
		ruleConjunction
		{ after(grammarAccess.getTupleAccess().getElementsConjunctionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__ElementsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTupleAccess().getElementsConjunctionParserRuleCall_2_1_0()); }
		ruleConjunction
		{ after(grammarAccess.getTupleAccess().getElementsConjunctionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__TermAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegativeAccess().getTermValueParserRuleCall_0_2_0()); }
		ruleValue
		{ after(grammarAccess.getNegativeAccess().getTermValueParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__NameAssignment_1_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getNameIDENTIFIERTerminalRuleCall_1_0_0_0_0()); }
		RULE_IDENTIFIER
		{ after(grammarAccess.getFunctionCallAccess().getNameIDENTIFIERTerminalRuleCall_1_0_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgumentsAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getArgumentsConjunctionParserRuleCall_1_1_0_0()); }
		ruleConjunction
		{ after(grammarAccess.getFunctionCallAccess().getArgumentsConjunctionParserRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgumentsAssignment_1_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getArgumentsConjunctionParserRuleCall_1_1_1_1_0()); }
		ruleConjunction
		{ after(grammarAccess.getFunctionCallAccess().getArgumentsConjunctionParserRuleCall_1_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDENTIFIERTerminalRuleCall_0()); }
		RULE_IDENTIFIER
		{ after(grammarAccess.getVariableAccess().getNameIDENTIFIERTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brackets__ContentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBracketsAccess().getContentExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getBracketsAccess().getContentExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WHITESPACE : (' '|'\t'|'\r'|'\n')+;

RULE_IDENTIFIER : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'\'')*;

RULE_STRING_LITERAL : '"' ('\\' .|~(('\\'|'"')))* '"';
