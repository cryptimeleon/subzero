/*
 * generated by Xtext 2.17.0
 */
package de.upb.crypto.zeroknowledge.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.upb.crypto.zeroknowledge.ide.contentassist.antlr.internal.InternalZeroKnowledgeParser;
import de.upb.crypto.zeroknowledge.services.ZeroKnowledgeGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ZeroKnowledgeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ZeroKnowledgeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ZeroKnowledgeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getComparisonAccess().getAlternatives_1_0(), "rule__Comparison__Alternatives_1_0");
			builder.put(grammarAccess.getSumAccess().getAlternatives_1_0(), "rule__Sum__Alternatives_1_0");
			builder.put(grammarAccess.getProductAccess().getAlternatives_1_0(), "rule__Product__Alternatives_1_0");
			builder.put(grammarAccess.getConstructAccess().getAlternatives(), "rule__Construct__Alternatives");
			builder.put(grammarAccess.getNegativeAccess().getAlternatives(), "rule__Negative__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getFunctionDefinitionAccess().getGroup(), "rule__FunctionDefinition__Group__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup_1(), "rule__ParameterList__Group_1__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup_1_1(), "rule__ParameterList__Group_1_1__0");
			builder.put(grammarAccess.getWitnessListAccess().getGroup(), "rule__WitnessList__Group__0");
			builder.put(grammarAccess.getWitnessListAccess().getGroup_2(), "rule__WitnessList__Group_2__0");
			builder.put(grammarAccess.getWitnessAccess().getGroup(), "rule__Witness__Group__0");
			builder.put(grammarAccess.getConjunctionAccess().getGroup(), "rule__Conjunction__Group__0");
			builder.put(grammarAccess.getConjunctionAccess().getGroup_1(), "rule__Conjunction__Group_1__0");
			builder.put(grammarAccess.getDisjunctionAccess().getGroup(), "rule__Disjunction__Group__0");
			builder.put(grammarAccess.getDisjunctionAccess().getGroup_1(), "rule__Disjunction__Group_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1_0_0(), "rule__Comparison__Group_1_0_0__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1_0_1(), "rule__Comparison__Group_1_0_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1_0_2(), "rule__Comparison__Group_1_0_2__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1_0_3(), "rule__Comparison__Group_1_0_3__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1_0_4(), "rule__Comparison__Group_1_0_4__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1_0_5(), "rule__Comparison__Group_1_0_5__0");
			builder.put(grammarAccess.getSumAccess().getGroup(), "rule__Sum__Group__0");
			builder.put(grammarAccess.getSumAccess().getGroup_1(), "rule__Sum__Group_1__0");
			builder.put(grammarAccess.getSumAccess().getGroup_1_0_0(), "rule__Sum__Group_1_0_0__0");
			builder.put(grammarAccess.getSumAccess().getGroup_1_0_1(), "rule__Sum__Group_1_0_1__0");
			builder.put(grammarAccess.getProductAccess().getGroup(), "rule__Product__Group__0");
			builder.put(grammarAccess.getProductAccess().getGroup_1(), "rule__Product__Group_1__0");
			builder.put(grammarAccess.getProductAccess().getGroup_1_0_0(), "rule__Product__Group_1_0_0__0");
			builder.put(grammarAccess.getProductAccess().getGroup_1_0_1(), "rule__Product__Group_1_0_1__0");
			builder.put(grammarAccess.getPowerAccess().getGroup(), "rule__Power__Group__0");
			builder.put(grammarAccess.getPowerAccess().getGroup_1(), "rule__Power__Group_1__0");
			builder.put(grammarAccess.getTupleAccess().getGroup(), "rule__Tuple__Group__0");
			builder.put(grammarAccess.getTupleAccess().getGroup_0(), "rule__Tuple__Group_0__0");
			builder.put(grammarAccess.getTupleAccess().getGroup_0_0(), "rule__Tuple__Group_0_0__0");
			builder.put(grammarAccess.getTupleAccess().getGroup_2(), "rule__Tuple__Group_2__0");
			builder.put(grammarAccess.getNegativeAccess().getGroup_0(), "rule__Negative__Group_0__0");
			builder.put(grammarAccess.getValueAccess().getGroup_3(), "rule__Value__Group_3__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_1(), "rule__FunctionCall__Group_1__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_1_0(), "rule__FunctionCall__Group_1_0__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_1_0_0(), "rule__FunctionCall__Group_1_0_0__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_1_1(), "rule__FunctionCall__Group_1_1__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_1_1_1(), "rule__FunctionCall__Group_1_1_1__0");
			builder.put(grammarAccess.getBracketsAccess().getGroup(), "rule__Brackets__Group__0");
			builder.put(grammarAccess.getModelAccess().getFunctionsAssignment_0(), "rule__Model__FunctionsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getWitnessListAssignment_1(), "rule__Model__WitnessListAssignment_1");
			builder.put(grammarAccess.getModelAccess().getProofAssignment_3(), "rule__Model__ProofAssignment_3");
			builder.put(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_0(), "rule__FunctionDefinition__NameAssignment_0");
			builder.put(grammarAccess.getFunctionDefinitionAccess().getParameterListAssignment_1(), "rule__FunctionDefinition__ParameterListAssignment_1");
			builder.put(grammarAccess.getFunctionDefinitionAccess().getBodyAssignment_3(), "rule__FunctionDefinition__BodyAssignment_3");
			builder.put(grammarAccess.getParameterListAccess().getParametersAssignment_1_0(), "rule__ParameterList__ParametersAssignment_1_0");
			builder.put(grammarAccess.getParameterListAccess().getParametersAssignment_1_1_1(), "rule__ParameterList__ParametersAssignment_1_1_1");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment(), "rule__Parameter__NameAssignment");
			builder.put(grammarAccess.getWitnessListAccess().getWitnessesAssignment_1(), "rule__WitnessList__WitnessesAssignment_1");
			builder.put(grammarAccess.getWitnessListAccess().getWitnessesAssignment_2_1(), "rule__WitnessList__WitnessesAssignment_2_1");
			builder.put(grammarAccess.getWitnessAccess().getNameAssignment_0(), "rule__Witness__NameAssignment_0");
			builder.put(grammarAccess.getWitnessAccess().getTestingAssignment_1(), "rule__Witness__TestingAssignment_1");
			builder.put(grammarAccess.getConjunctionAccess().getOperationAssignment_1_1(), "rule__Conjunction__OperationAssignment_1_1");
			builder.put(grammarAccess.getConjunctionAccess().getRightAssignment_1_2(), "rule__Conjunction__RightAssignment_1_2");
			builder.put(grammarAccess.getDisjunctionAccess().getOperationAssignment_1_1(), "rule__Disjunction__OperationAssignment_1_1");
			builder.put(grammarAccess.getDisjunctionAccess().getRightAssignment_1_2(), "rule__Disjunction__RightAssignment_1_2");
			builder.put(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_0_1(), "rule__Comparison__OperationAssignment_1_0_0_1");
			builder.put(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_1_1(), "rule__Comparison__OperationAssignment_1_0_1_1");
			builder.put(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_2_1(), "rule__Comparison__OperationAssignment_1_0_2_1");
			builder.put(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_3_1(), "rule__Comparison__OperationAssignment_1_0_3_1");
			builder.put(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_4_1(), "rule__Comparison__OperationAssignment_1_0_4_1");
			builder.put(grammarAccess.getComparisonAccess().getOperationAssignment_1_0_5_1(), "rule__Comparison__OperationAssignment_1_0_5_1");
			builder.put(grammarAccess.getComparisonAccess().getRightAssignment_1_1(), "rule__Comparison__RightAssignment_1_1");
			builder.put(grammarAccess.getSumAccess().getOperationAssignment_1_0_0_1(), "rule__Sum__OperationAssignment_1_0_0_1");
			builder.put(grammarAccess.getSumAccess().getOperationAssignment_1_0_1_1(), "rule__Sum__OperationAssignment_1_0_1_1");
			builder.put(grammarAccess.getSumAccess().getRightAssignment_1_1(), "rule__Sum__RightAssignment_1_1");
			builder.put(grammarAccess.getProductAccess().getOperationAssignment_1_0_0_1(), "rule__Product__OperationAssignment_1_0_0_1");
			builder.put(grammarAccess.getProductAccess().getOperationAssignment_1_0_1_1(), "rule__Product__OperationAssignment_1_0_1_1");
			builder.put(grammarAccess.getProductAccess().getRightAssignment_1_1(), "rule__Product__RightAssignment_1_1");
			builder.put(grammarAccess.getPowerAccess().getRightAssignment_1_2(), "rule__Power__RightAssignment_1_2");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
			builder.put(grammarAccess.getTupleAccess().getElementsAssignment_0_0_2(), "rule__Tuple__ElementsAssignment_0_0_2");
			builder.put(grammarAccess.getTupleAccess().getElementsAssignment_1(), "rule__Tuple__ElementsAssignment_1");
			builder.put(grammarAccess.getTupleAccess().getElementsAssignment_2_1(), "rule__Tuple__ElementsAssignment_2_1");
			builder.put(grammarAccess.getNegativeAccess().getTermAssignment_0_2(), "rule__Negative__TermAssignment_0_2");
			builder.put(grammarAccess.getFunctionCallAccess().getNameAssignment_1_0_0_0(), "rule__FunctionCall__NameAssignment_1_0_0_0");
			builder.put(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_1_1_0(), "rule__FunctionCall__ArgumentsAssignment_1_1_0");
			builder.put(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_1_1_1_1(), "rule__FunctionCall__ArgumentsAssignment_1_1_1_1");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
			builder.put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
			builder.put(grammarAccess.getBracketsAccess().getContentAssignment_1(), "rule__Brackets__ContentAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ZeroKnowledgeGrammarAccess grammarAccess;

	@Override
	protected InternalZeroKnowledgeParser createParser() {
		InternalZeroKnowledgeParser result = new InternalZeroKnowledgeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WHITESPACE", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ZeroKnowledgeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ZeroKnowledgeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
