/*
 * generated by Xtext 2.24.0
 */
package org.cryptimeleon.subzero.generator;

import org.cryptimeleon.subzero.model.AugmentedModel;
import org.cryptimeleon.subzero.subzero.Model;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.cryptimeleon.subzero.latex.LatexGenerator;
import org.cryptimeleon.subzero.java.JavaGenerator;

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 *
 * Precondition: model must be free of validation errors before Java code generation can occur
 */
public class SubzeroGenerator extends AbstractGenerator {
    // The compiled code file when using the web editor
    private static String OUTPUT_FILE = "/DEFAULT_ARTIFACT";

    private static String CODE_RESOURCE = "code.sub0";
    private static String LATEX_RESOURCE = "latex.sub0";


    public void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        String resourceId = resource.getURI().toString();
        System.out.println("Generating resource: " + resourceId);

        // If build is canceled, stop code generation
        if (context.getCancelIndicator().isCanceled()) return;

        // Get the parsed syntax tree
        Model model = (Model) resource.getContents().iterator().next();

        // Create the augmented model to provide additional functionality
        AugmentedModel augmentedModel = new AugmentedModel(model);

        CodeGenerator generator;
        if (resourceId.endsWith(LATEX_RESOURCE)) {
            // Generate LaTeX preview code
            generator = new LatexGenerator(augmentedModel);
        } else if (resourceId.endsWith(CODE_RESOURCE)) {
            // Generate Java project
            generator = new JavaGenerator(augmentedModel);
        } else {
            System.out.println("Error: invalid resource ID");
            return;
        }

        // Generate the final file
        fsa.generateFile(OUTPUT_FILE, generator.generate());
    }
}
