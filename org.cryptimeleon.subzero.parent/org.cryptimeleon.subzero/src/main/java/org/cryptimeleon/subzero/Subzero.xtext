grammar org.cryptimeleon.subzero.Subzero hidden(WHITESPACE, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate subzero "http://www.cryptimeleon.org/subzero/Subzero"

/*
 * This file specifies the syntax and grammar of the Subzero language, and is written using
 * the Xtend grammar language
 * 
 * See https://www.eclipse.org/Xtext/documentation/301_grammarlanguage.html
 */

Model returns Model:
  (protocolName=PROTOCOL_NAME)?
  functions+=(FunctionDefinition)*

  (
  ('witness' ':'? (witnesses+=Witness (',' witnesses+=Witness)*) ';'?) |
  ('common' ':'? (constants+=Constant (',' constants+=Constant)*) ';'?) |
  ('pp' ':'? (publicParameters+=PublicParameter (',' publicParameters+=PublicParameter)*) ';'?)
  )*

  ('statement' ':')? (proof=Expression) ';'?;

FunctionDefinition returns FunctionDefinition:
  inline?='inline'?
  name=IDENTIFIER
  '(' (parameters+=Parameter (',' parameters+=Parameter)*)? symbol=')'
  '{' body=Expression ';'? '}' ';'?;

Parameter returns Parameter:
  name=IDENTIFIER;
  
Witness returns Witness:
  name=IDENTIFIER;
  
Constant returns Constant:
  name=IDENTIFIER;
  
PublicParameter returns PublicParameter:
  name=IDENTIFIER;

Expression:
  Disjunction;

Disjunction returns Expression:
  Conjunction ({Disjunction.left=current} operation='|' right=Conjunction)*;

Conjunction returns Expression:
  Comparison ({Conjunction.left=current} operation='&' right=Comparison)*;

Comparison returns Expression:
  Sum ({Comparison.left=current} operation=COMPARISON_OPERATOR center=Sum (operation2=COMPARISON_OPERATOR right=Sum)? (subprotocolName=PROTOCOL_NAME)? )?;
  
Sum returns Expression:
  Product ({Sum.left=current} operation=('+' | '-') right=Product)*;

Product returns Expression:
  Power ({Product.left=current} operation=('*' | '/') right=Power)*;
 
Power returns Expression:
  Construct ({Power.left = current} operation='^' right=Power)?;

Construct returns Expression:
  StringLiteral | Tuple | Negative;
  
StringLiteral returns StringLiteral:
  value=STRING_LITERAL;

Tuple returns Expression:
  =>({Tuple} '(' elements+=Disjunction ',') elements+=Disjunction (',' elements+=Disjunction)* ')';

Negative returns Expression:
  {Negative} operation='-' term=Value | Value;

Value returns Expression:
  FunctionCall | Variable | NumberLiteral | '(' Brackets ')';

FunctionCall returns Expression:
  {FunctionCall} (->(name=IDENTIFIER '(') (arguments+=Argument (',' arguments+=Argument)*)? ')');

Argument returns Expression:
  {Argument} expression=Disjunction;

Variable returns Variable:
  name=IDENTIFIER;

NumberLiteral returns NumberLiteral:
  value=INT;

Brackets returns Expression:
  {Brackets} content=Expression;
	
/*
 * Postprocessing nodes
 * These objects will never be created during parsing, but will
 * replace some nodes in postprocessing to add information to the
 * parse tree
 */
ConstantVariable returns Variable:
  {ConstantVariable} name=IDENTIFIER;

LocalVariable returns Variable:
  {LocalVariable} name=IDENTIFIER function=IDENTIFIER;

WitnessVariable returns Variable:
  {WitnessVariable} name=IDENTIFIER;
  
PPVariable returns Variable:
  {PPVariable} name=IDENTIFIER;
  
/*
 * Terminals
 */
terminal INT returns ecore::EInt:
  ('0'..'9')+;

terminal ML_COMMENT:
  '/*' -> '*/';

terminal SL_COMMENT:
  '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WHITESPACE:
  (' '|'\t'|'\r'|'\n')+;

terminal IDENTIFIER:
  ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'~'|'\'')*;

terminal STRING_LITERAL:
  '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';
  
terminal COMPARISON_OPERATOR:
  '!=' | '=' | '<' | '<=' | '>' | '>=';

terminal PROTOCOL_NAME:
  ('[' ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|' ')*']');