/*
 * generated by Xtext 2.24.0
 */
package org.cryptimeleon.subzero.generator

import org.cryptimeleon.subzero.builder.ProjectBuilder
import org.cryptimeleon.subzero.latex.LatexPreview
import org.cryptimeleon.subzero.model.AugmentedModel
import org.cryptimeleon.subzero.subzero.Model
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.cryptimeleon.subzero.builder.StackTrace

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 * 
 * Precondition: model must be free of validation errors before Java code generation can occur
 */
class SubzeroGenerator extends AbstractGenerator {
	// The compiled code file when using the web editor
	static val OUTPUT_FILE = '/DEFAULT_ARTIFACT';
	
	static val CODE_RESOURCE = 'code.sub0';
	static val LATEX_RESOURCE = 'latex.sub0';
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// For debugging purposes
		val String resourceId = resource.getURI().toString();
		System.out.println("Generating resource: " + resourceId);
		
		// If build is canceled, stop code generation
		if (context.getCancelIndicator.isCanceled()) return;
		
		// Get the parsed syntax tree
		val Model model = resource.getContents().iterator().next() as Model;
	
		// Create the augmented model to provide additional functionality
		val AugmentedModel augmentedModel = new AugmentedModel(model);
		
		var String generationOutput;
		if (resourceId.endsWith(LATEX_RESOURCE)) {
			// Generate LaTeX preview code
			val LatexPreview latexPreview = new LatexPreview(augmentedModel);
			generationOutput = latexPreview.getRawLatex();
			
		} else if (resourceId.endsWith(CODE_RESOURCE)) {
			// Generate Java project
			try {
				val CodeGenerator codeGeneration = new CodeGenerator(augmentedModel);
				val ProjectBuilder project = codeGeneration.generate();
				generationOutput = project.getProject();
			} catch (Throwable e) {
				val StackTrace error = new StackTrace(e);
				generationOutput = error.toString();
			}
		} else {
			System.out.println("Error: invalid resource ID");
			return;
		}
		
		// Generate the final file
		fsa.generateFile(OUTPUT_FILE, generationOutput);
	}
	
	
	
}
