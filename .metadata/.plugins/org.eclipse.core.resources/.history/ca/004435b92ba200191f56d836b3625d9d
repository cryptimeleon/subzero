/*
 * generated by Xtext 2.17.0
 */
package de.upb.crypto.zeroknowledge.formatting2

import com.google.inject.Inject
import de.upb.crypto.zeroknowledge.services.ZeroKnowledgeGrammarAccess
import de.upb.crypto.zeroknowledge.zeroKnowledge.FunctionDefinition
import de.upb.crypto.zeroknowledge.zeroKnowledge.Model
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import static de.upb.crypto.zeroknowledge.zeroKnowledge.ZeroKnowledgePackage.Literals.*
import de.upb.crypto.zeroknowledge.zeroKnowledge.WitnessList

class ZeroKnowledgeFormatter extends AbstractFormatter2 {
	
	@Inject extension ZeroKnowledgeGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		
		for (functionDefinition : model.functions) {
			functionDefinition.format
		}
		model.witnessList.format
		model.proof.format
	}

	def dispatch void format(FunctionDefinition functionDefinition, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		functionDefinition.regionFor.feature(FUNCTION_DEFINITION__NAME).surround[noSpace]
		functionDefinition.regionFor.keyword("{").append[newLine]
		functionDefinition.regionFor.keyword("}").prepend[newLine]
		
		
		functionDefinition.parameterList.format
		functionDefinition.body.format
	}
	
	def dispatch void format(WitnessList witnessList, extension IFormattableDocument document) {
		witnessList.regionFor.keyword("(").surround[noSpace];
		witnessList.regionFor.keyword(")").surround[noSpace];
		witnessList.regionFor.keyword(",").prepend[noSpace];
		witnessList.regionFor.keyword(",").append[oneSpace];
	}
	
	// TODO: implement for ParameterList, WitnessList, Conjunction, Disjunction, Comparison, Sum, Product, Power, Tuple, Negative, FunctionCall, Brackets
}
