/*
 * generated by Xtext 2.17.0
 */
package de.upb.crypto.zeroknowledge.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import java.util.HashMap
import java.util.HashSet

import org.eclipse.emf.ecore.EObject

import de.upb.crypto.math.expressions.*;

import de.upb.crypto.zeroknowledge.model.ModelPrinter
import de.upb.crypto.zeroknowledge.model.BranchState
import de.upb.crypto.zeroknowledge.model.ModelHelper

import de.upb.crypto.zeroknowledge.type.Type

import de.upb.crypto.zeroknowledge.predefined.PredefinedFunctionsHelper

import de.upb.crypto.zeroknowledge.zeroKnowledge.Model
import de.upb.crypto.zeroknowledge.zeroKnowledge.Conjunction
import de.upb.crypto.zeroknowledge.zeroKnowledge.Disjunction
import de.upb.crypto.zeroknowledge.zeroKnowledge.Comparison
import de.upb.crypto.zeroknowledge.zeroKnowledge.Sum
import de.upb.crypto.zeroknowledge.zeroKnowledge.Product
import de.upb.crypto.zeroknowledge.zeroKnowledge.Power
import de.upb.crypto.zeroknowledge.zeroKnowledge.StringLiteral
import de.upb.crypto.zeroknowledge.zeroKnowledge.Tuple
import de.upb.crypto.zeroknowledge.zeroKnowledge.Negative
import de.upb.crypto.zeroknowledge.zeroKnowledge.FunctionCall
import de.upb.crypto.zeroknowledge.zeroKnowledge.Variable
import de.upb.crypto.zeroknowledge.zeroKnowledge.LocalVariable
import de.upb.crypto.zeroknowledge.zeroKnowledge.NumberLiteral
import de.upb.crypto.zeroknowledge.zeroKnowledge.Brackets
import de.upb.crypto.zeroknowledge.zeroKnowledge.FunctionDefinition
import de.upb.crypto.zeroknowledge.zeroKnowledge.Parameter
import de.upb.crypto.zeroknowledge.zeroKnowledge.Argument
import de.upb.crypto.zeroknowledge.type.TypeInference
import org.eclipse.xtext.generator.IFileSystemAccess

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 * 
 * Precondition: model must be free of validation errors before Java code generation can occur
 */
class ZeroKnowledgeGenerator extends AbstractGenerator {
	
	// The compiled code file when using the Eclipse editor
	static val LOCAL_OUTPUT_FILE = 'proof.java';
	
	// The compiled code file when using the web editor
	static val WEB_OUTPUT_FILE = '/DEFAULT_ARTIFACT';
	
	// Set to true for Eclipse editor, false for web editor
	static val COMPILE_LOCALLY = false;
	
	
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		System.out.println("GENERATOR CALLED" + resource.getURI());
		
		val String resourceId = resource.getURI().toString();
		val Model model = resource.getContents().iterator().next() as Model;
		
		// If build is canceled, stop code generation
		if (context.getCancelIndicator.isCanceled()) return;
	
		val CodeGeneration codeGeneration = new CodeGeneration(model);
		val String code = codeGeneration.getCode();
		
		// Generate the final file
		if (COMPILE_LOCALLY) {
			fsa.generateFile(LOCAL_OUTPUT_FILE, code);
		} else {
			fsa.generateFile(WEB_OUTPUT_FILE, code);
		}
	}
	
	
	
}
