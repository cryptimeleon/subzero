/*
 * generated by Xtext 2.17.0
 */
package de.upb.crypto.zeroknowledge.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import de.upb.crypto.zeroknowledge.helpers.VariableCounter
import de.upb.crypto.zeroknowledge.helpers.BranchState
import de.upb.crypto.zeroknowledge.zeroKnowledge.Model
import de.upb.crypto.zeroknowledge.zeroKnowledge.Conjunction
import de.upb.crypto.zeroknowledge.zeroKnowledge.Disjunction
import de.upb.crypto.zeroknowledge.zeroKnowledge.Comparison
import de.upb.crypto.zeroknowledge.zeroKnowledge.Sum
import de.upb.crypto.zeroknowledge.zeroKnowledge.Product
import de.upb.crypto.zeroknowledge.zeroKnowledge.Power
import de.upb.crypto.zeroknowledge.zeroKnowledge.StringLiteral
import de.upb.crypto.zeroknowledge.zeroKnowledge.Tuple
import de.upb.crypto.zeroknowledge.zeroKnowledge.Negative
import de.upb.crypto.zeroknowledge.zeroKnowledge.FunctionCall
import de.upb.crypto.zeroknowledge.zeroKnowledge.Variable
import de.upb.crypto.zeroknowledge.zeroKnowledge.NumberLiteral
import de.upb.crypto.zeroknowledge.zeroKnowledge.Brackets
import de.upb.crypto.zeroknowledge.helpers.ModelMap
import de.upb.crypto.zeroknowledge.zeroKnowledge.ZeroKnowledgeFactory
import org.eclipse.emf.ecore.EObject
import de.upb.crypto.zeroknowledge.helpers.ModelHelper

import de.upb.crypto.math.expressions.*;
import de.upb.crypto.zeroknowledge.helpers.ModelPrinter
import java.util.ArrayList
import de.upb.crypto.zeroknowledge.helpers.VariableEnvironment
import java.util.Set
import java.util.HashSet
import de.upb.crypto.zeroknowledge.zeroKnowledge.FunctionDefinition
import java.util.Map
import java.util.HashMap
import de.upb.crypto.zeroknowledge.zeroKnowledge.Parameter

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ZeroKnowledgeGenerator extends AbstractGenerator {
	
	Set<String> variables;
	Set<String> literals;
	
	StringBuilder codeBuilder;
	StringBuilder importBuilder;
	StringBuilder functionBuilder;
	StringBuilder exponentVariableBuilder;
	StringBuilder groupVariableBuilder;
	StringBuilder literalBuilder;
	
	String OPERATOR_EQUAL = "=";
	String OPERATOR_INEQUAL = "!=";
	String OPERATOR_LESS = "<";
	String OPERATOR_GREATER = ">";
	String OPERATOR_LESSEQUAL = "<=";
	String OPERATOR_GREATEREQUAL = ">=";
	String NEWLINE = "\n";
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	
		variables = new HashSet<String>;
		literals = new HashSet<String>;
	
		codeBuilder = new StringBuilder();
		importBuilder = new StringBuilder();
		functionBuilder = new StringBuilder();
		exponentVariableBuilder = new StringBuilder();
		groupVariableBuilder = new StringBuilder();
		literalBuilder = new StringBuilder();
	
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))

		// Perform model transformations
		val Model model = resource.getContents().iterator().next() as Model;
		val boolean inline = false;
		
		if (inline) ModelHelper.inlineFunctions(model);
		ModelHelper.normalizeNegatives(model);

		ModelPrinter.print(model);

		generateImports();
		generateFunctions(model, new BranchState());
		val String code = generateCode(model, new BranchState());
	
		codeBuilder.append(importBuilder);
		codeBuilder.append(NEWLINE);
		codeBuilder.append(functionBuilder);
		codeBuilder.append(NEWLINE);
		codeBuilder.append(literalBuilder);
		codeBuilder.append(NEWLINE);
		codeBuilder.append(exponentVariableBuilder);
		codeBuilder.append(NEWLINE);
		codeBuilder.append(groupVariableBuilder);
		codeBuilder.append(NEWLINE);
		codeBuilder.append(code);
		
		System.out.println(codeBuilder.toString());
				
		if (context.getCancelIndicator.isCanceled()) return;
		if (!inline) return;
		
		//fsa.generateFile('first.java', codeBuilder.toString());
	}
	
	// Generates all required import statements
	def void generateImports() {
		importBuilder.append(
			'''
			import de.upb.crypto.math.expressions.*
			'''
		)
	}
	
	def void generateFunctions(Model model, BranchState state) {
		for (FunctionDefinition function : model.getFunctions()) {
			val Map<String, Boolean> mapping = new HashMap<String, Boolean>();
			
			ModelMap.preorder(function.getBody(), [EObject node |
				if (node instanceof Sum) {
					ModelMap.postorder(node, [EObject child |
						if (child instanceof Variable) {
							val String name = child.getName();
							if (!mapping.containsKey(name)) {
								mapping.put(name, true);
							}
						}
						
					]);
				} else if (node instanceof Power) {
					ModelMap.postorder(node.getRight(), [EObject child |
						if (child instanceof Variable) {
							val String name = child.getName();
							if (!mapping.containsKey(name)) {
								mapping.put(name, true);
							}
						}
					]);
				}
				
			]);
			
			ModelMap.postorder(function.getBody(), [EObject node |
				if (node instanceof Variable) {
					val String name = node.getName();
					if (!mapping.containsKey(name)) {
						mapping.put(name, false);
					}
				}
				
			]);
				
//			val String type = (mapping.get("test").booleanValue() ? "ExponentVariableExpr" : "GroupVariablExpr"); 
//			
			functionBuilder.append(
				'''
				private static «function.getName()»(«FOR Parameter parameter : function.getParameterList().getParameters() SEPARATOR ', '»«IF mapping.containsKey(parameter.getName()) == true && mapping.get(parameter.getName())»ExponentVariableExpr«ELSE»GroupVariablExpr«ENDIF» «parameter.getName()»«ENDFOR») {
					«generateCode(function.getBody(), state)»
				}
				'''
			);
			// Throw a console warning above if the type cannot be determined for the variable
			// Or possibly move this warning to validation
			
		}
	}
	
	
	def dispatch String generateCode(Model node, BranchState state) {
		return generateCode(node.getProof(), state);
	}
	
	def dispatch String generateCode(Conjunction node, BranchState state) {
		val String left = generateCode(node.getLeft(), state);
		val String right = generateCode(node.getRight(), state);
		
		return 
		'''
		«left»
		.and(«right»)
		''';
	}
	
	def dispatch String generateCode(Disjunction node, BranchState state) {
		val String left = generateCode(node.getLeft(), state);
		val String right = generateCode(node.getRight(), state);
		
		return '''«left».or(«right»)''';
		}
	
	def dispatch String generateCode(Comparison node, BranchState state) {
		val String left = generateCode(node.getLeft(), state);
		val String right = generateCode(node.getRight(), state);		
		var String operator;
		
		switch node.getOperation() {
			case OPERATOR_EQUAL: operator = "equals"
			case OPERATOR_INEQUAL: operator = "notequals"
			case OPERATOR_LESS: operator = "lessthan"
			case OPERATOR_GREATER: operator = "greaterthan"
			case OPERATOR_LESSEQUAL: operator = "lessthanequal"
			case OPERATOR_GREATEREQUAL: operator = "greaterthanequal"
		}
		
		return '''«left».«operator»(«right»)''';
	}
	
	def dispatch String generateCode(Sum node, BranchState state) {
		
		val newState = new BranchState(state);
		newState.setExponentContext();
		val String left = generateCode(node.getLeft(), newState);
		val String right = generateCode(node.getRight(), newState);
		
		return '''«left».add(«right»)''';
	}
	
	def dispatch String generateCode(Product node, BranchState state) {

		var String name;
		val String left = generateCode(node.getLeft(), state);
		val String right = generateCode(node.getRight(), state);
		
		if (ModelHelper.hasSumOrPowerAncestor(node)) {
			return '''«left».mul(«right»)'''
		} else {
			return '''«left».op(«right»)''';
		}

	}
	
	def dispatch String generateCode(Power node, BranchState state) {
		
		val String left = generateCode(node.getLeft(), state);
		val String right = generateCode(node.getRight(), state);
		
		return '''«left».pow(«right»)''';		
	}
	
	def dispatch String generateCode(StringLiteral node, BranchState state) {
		return '''«node.getValue()»''';
	}
	
	def dispatch String generateCode(Tuple node, BranchState state) {
		return '''«FOR element : node.getElements() SEPARATOR ', '»«generateCode(element, state)»«ENDFOR»'''
	}

	def dispatch String generateCode(Negative node, BranchState state) {
		
		val String term = generateCode(node.getTerm(), state);
		
		return '''«term».neg()''';		
	}
	
	def dispatch String generateCode(FunctionCall node, BranchState state) {
		val String name = ModelHelper.convertToJavaName(node.getName());
		
		return '''«name»(«FOR argument : node.getArguments() SEPARATOR ','»generateCode(argument)«ENDFOR»)'''
	}
	
	def dispatch String generateCode(Variable node, BranchState state) {
		val String name = ModelHelper.convertToJavaName(node.getName());
		
		
		if (state.isExponentContext()) {
			if (!variables.contains(name)) {
				variables.add(name);
				exponentVariableBuilder.append(
					'''
					ExponentVariableExpr «name» = new ExponentVariableExpr(«name»);
					'''
				);
			}
		} else {
			if (!variables.contains(name)) {
				variables.add(name);
				groupVariableBuilder.append(
					'''
					GroupVariableExpr «name» = new GroupVariableExpr("«name»");
					'''
				);
			}
		}
		
		variables.add(name);
		
		return name;
	}
	
	def dispatch String generateCode(NumberLiteral node, BranchState state) {
		
		val String name = "val_" + node.getValue();
		
		if (!literals.contains(name)) {
			literals.add(name);
			literalBuilder.append('''
				ExponentLiteralExpr «name» = new ExponentLiteralExpr(«node.getValue()»);
			''');
		}

		return name;
	}
	
	def dispatch String generateCode(Brackets node, BranchState state) {
		return generateCode(node.getContent(), state);
	}
	
}
