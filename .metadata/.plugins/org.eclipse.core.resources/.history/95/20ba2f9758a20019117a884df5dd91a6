package de.upb.crypto.zeroknowledge.helpers;

import java.util.Map
import java.util.ArrayList
import java.util.HashMap

class PredefinedFunctions {
	
	// Any new predefined function that is added to this class must also
	// have its name added to this array
	static FunctionSignature[] = #[
		new FunctionSignature("", "", 2),
		
	]
		
	// Converts internal class name to simpler form
	// Possibly remove and simply use fully qualified name
	def private static String convertType(String type) {
		val int periodIndex = type.lastIndexOf('.');
		if (periodIndex > 0) {
			return type.substring(periodIndex + 1);
		}
		return type;
	}

	// Returns a map containing the function signatures of all predefined functions
	def static Map<String, FunctionSignature> getAllPredefinedFunctions() {
		val Map<String, FunctionSignature> functions = new HashMap<String, FunctionSignature>();
		
		for (String name : methods)  {
			val String type = convertType(method.getReturnType().getName());
			val int parameters = method.getParameterCount();
			val FunctionSignature signature = new FunctionSignature(name, type, parameters);
			functions.put(name,  signature);
		}
		
		return functions;
	}
	
	
		
	def static int a() {
		return 1;
	}
	
	def static String b() {
		return "test";
	}
	
}
